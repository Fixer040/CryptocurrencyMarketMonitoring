@page "/"
@using CryptocurrencyMarketMonitoring.Shared
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Grids
@using System.ComponentModel
@inject HttpClient Http

<div class="text-center justify-content-center">
    <h1>Cryptocurrency prices today</h1>



    <SfGrid DataSource="@Cryptocurrencies" AllowSorting="true">
        <GridColumns>
            <GridColumn Field="@nameof(Cryptocurrency.CryptocurrencyId)" HeaderText="#" TextAlign="TextAlign.Center" />
            <GridColumn Field="@nameof(Cryptocurrency.Name)" HeaderText="Name" TextAlign="TextAlign.Center" />
            <GridColumn Field="@nameof(Cryptocurrency.PriceUSD)" HeaderText="Price" TextAlign="TextAlign.Center" Format="$0.00" />
            <GridColumn Field="@nameof(Cryptocurrency.LastDayPercentageMovement)" HeaderText="24h" TextAlign="TextAlign.Center" Format="0.00%" />
            <GridColumn Field="@nameof(Cryptocurrency.LastWeekPercentageMovement)" HeaderText="7d" TextAlign="TextAlign.Center" Format="0.00%" />
            <GridColumn Field="@nameof(Cryptocurrency.MarketCapUSD)" HeaderText="Market cap" TextAlign="TextAlign.Center" Format="$0" />
            <GridColumn Field="@nameof(Cryptocurrency.VolumeUSD)" HeaderText="Volume" TextAlign="TextAlign.Center" Format="$0" />
            <GridColumn Field="@nameof(Cryptocurrency.CirculatingSupply)" HeaderText="Circulating supply" TextAlign="TextAlign.Center" />

        </GridColumns>
    </SfGrid>
</div>

@code{
    public ObservableCollection<Cryptocurrency> Cryptocurrencies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var cryptocurrencyList = await Http.GetFromJsonAsync<Cryptocurrency[]>("CryptocurrencyOverview/list");

        Cryptocurrencies = new ObservableCollection<Cryptocurrency>(cryptocurrencyList);



        _ = Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(60000);
                cryptocurrencyList = await Http.GetFromJsonAsync<Cryptocurrency[]>("CryptocurrencyOverview/list");

                foreach (var cryptocurrency in cryptocurrencyList)
                {
                    var observableCryptocurrency = Cryptocurrencies.First(x => x.Ticker == cryptocurrency.Ticker);

                    observableCryptocurrency.LastDayPercentageMovement = cryptocurrency.LastDayPercentageMovement;
                    observableCryptocurrency.LastWeekPercentageMovement = cryptocurrency.LastWeekPercentageMovement;
                    observableCryptocurrency.MarketCapUSD = cryptocurrency.MarketCapUSD;
                    observableCryptocurrency.PriceUSD = cryptocurrency.PriceUSD;
                    observableCryptocurrency.VolumeUSD = cryptocurrency.VolumeUSD;
                }
            }

        });


    }




}
@page "/"
@using CryptocurrencyMarketMonitoring.Shared
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Grids
@using System.ComponentModel
@using System.Linq;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic;
@using Microsoft.Extensions.DependencyInjection;
@using CryptocurrencyMarketMonitoring.Client.Services; 
@implements IAsyncDisposable



@inject NavigationManager NavigationManager



@inject IHttpService Http


<div class="text-center justify-content-center">
    <h1 class="text-capitalize text-dark">Top 100 cryptocurrency prices today</h1>

    <SfGrid @ref="Grid" DataSource="@Cryptocurrencies" AllowSorting="true" >
        <GridSortSettings>
            <GridSortColumns>
                <GridSortColumn Field="@nameof(CryptocurrencyOverviewDto.Ranking)" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridColumns>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.Ranking)" HeaderText="Ranking" TextAlign="TextAlign.Center" />
            <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="45" AllowSorting="false">
                <Template>
                    @{
                        var employee = (context as CryptocurrencyOverviewDto);
                        <div class="image">
                            <img width="30" height="30" src="@employee.IconSrc" />
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.Name)" HeaderText="Name" TextAlign="TextAlign.Center"/>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.Ticker)" HeaderText="Symbol" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        var ticker = ((CryptocurrencyOverviewDto)context).Ticker;
                        var link = $"/detail/{ticker}";
                        <div>
                            <NavLink href="@link">@ticker</NavLink>
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.PriceUSD)" HeaderText="Price" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        var dto = (CryptocurrencyOverviewDto)context;
                        var priceString = dto.PriceUSD < 1 ? dto.PriceUSD.ToString("$0.0000") : dto.PriceUSD.ToString("$0.00");

                        <div>@priceString</div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.LastDayPercentageMovement)" HeaderText="24h" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        <div class="@(((CryptocurrencyOverviewDto)context).LastDayPercentageMovement < 0 ? "text-danger" : "text-success")">
                            @(((CryptocurrencyOverviewDto)context).LastDayPercentageMovement.ToString("0.00%"))
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.LastWeekPercentageMovement)" HeaderText="7d" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        <div class="@(((CryptocurrencyOverviewDto)context).LastWeekPercentageMovement < 0 ? "text-danger" : "text-success")">
                            @(((CryptocurrencyOverviewDto)context).LastWeekPercentageMovement.ToString("0.00%"))
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.VolumeUSD)" HeaderText="Volume" TextAlign="TextAlign.Center" Format="C0" />
            <GridColumn Field="@nameof(CryptocurrencyOverviewDto.MarketCapUSD)" HeaderText="Market cap" TextAlign="TextAlign.Center" Format="C0" />


        </GridColumns>
    </SfGrid>
</div>

@code{
    public List<CryptocurrencyOverviewDto> Cryptocurrencies { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var cryptocurrencyList = await Http.Get<CryptocurrencyOverviewDto[]>("CryptocurrencyOverview/list");
        //var cryptocurrencyList = await Http.GetFromJsonAsync<CryptocurrencyOverviewDto[]>("CryptocurrencyOverview/list");

        Cryptocurrencies = new List<CryptocurrencyOverviewDto>(cryptocurrencyList);

        Grid.Refresh();

        _updateHubConnection = new HubConnectionBuilder().AddJsonProtocol(options =>
        {
            options.PayloadSerializerOptions.PropertyNamingPolicy = null;
        }).WithUrl(NavigationManager.ToAbsoluteUri("/overview-update")).Build();



        _updateHubConnection.On<IEnumerable<CryptocurrencyOverviewUpdateDto>>("SendUpdateAsync", (cryptocurrencyListUpdates) =>
        {
            DoGridUpdate(cryptocurrencyListUpdates);
        });

        await _updateHubConnection.StartAsync();

    }


    public async ValueTask DisposeAsync()
    {
        await _updateHubConnection.DisposeAsync();
    }

    private void DoGridUpdate(IEnumerable<CryptocurrencyOverviewUpdateDto> cryptocurrencyListUpdates)
    {
        foreach (var update in cryptocurrencyListUpdates)
        {
            switch (update.UpdateType)
            {
                case CryptocurrencyOverviewUpdateType.Create:
                    Cryptocurrencies.Add(update.Data);
                    break;
                case CryptocurrencyOverviewUpdateType.Delete:
                    Cryptocurrencies.Remove(Cryptocurrencies.FirstOrDefault(x => x.Ticker == update.Data.Ticker));
                    break;
                case CryptocurrencyOverviewUpdateType.Update:
                    UpdateCryptocurrencyOverviewData(Cryptocurrencies.FirstOrDefault(x => x.Ticker == update.Data.Ticker), update);
                    break;
                default:
                    continue;
            }
        }

        Grid.Refresh();
    }

    private void UpdateCryptocurrencyOverviewData(CryptocurrencyOverviewDto overview, CryptocurrencyOverviewUpdateDto update)
    {
        if (overview.Ranking != update.Data.Ranking)
            overview.Ranking = update.Data.Ranking;

        if (overview.LastDayPercentageMovement != update.Data.LastDayPercentageMovement)
            overview.LastDayPercentageMovement = update.Data.LastDayPercentageMovement;

        if (overview.LastWeekPercentageMovement != update.Data.LastWeekPercentageMovement)
            overview.LastWeekPercentageMovement = update.Data.LastWeekPercentageMovement;

        if (overview.MarketCapUSD != update.Data.MarketCapUSD)
            overview.MarketCapUSD = update.Data.MarketCapUSD;

        if (overview.PriceUSD != update.Data.PriceUSD)
            overview.PriceUSD = update.Data.PriceUSD;

        if (overview.VolumeUSD != update.Data.VolumeUSD)
            overview.VolumeUSD = update.Data.VolumeUSD;
    }

    private HubConnection _updateHubConnection;
    public SfGrid<CryptocurrencyOverviewDto> Grid;
}

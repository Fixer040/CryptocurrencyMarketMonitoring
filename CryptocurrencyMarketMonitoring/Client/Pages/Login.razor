@page "/login"
@using CryptocurrencyMarketMonitoring.Client.Helpers;
@using CryptocurrencyMarketMonitoring.Client.Services;
@using CryptocurrencyMarketMonitoring.Shared;
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div class="background-login d-flex align-items-center justify-content-center">

    <div class="w-25">
        <div class="card text-center justify-content-center">
            <div class="card-header">
                <h4 class="text-white">Log In</h4>
                <h6 class="text-white">Don't have an acount yet? <a href="register" class="text-info">Register here</a></h6>

                <img src="/img/logo2.png" width="141" height="50" alt="">
            </div>
            <div class="card-body">
                <EditForm Model="@_login" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group d-flex justify-content-center">
                        <label class="w-50">
                            Username
                            <InputText @bind-Value="_login.Username" class="form-control" />
                            <ValidationMessage For="@(() => _login.Username)" />
                        </label>
                    </div>
                    <div class="form-group d-flex justify-content-center">
                        <label class="w-50">
                            Password
                            <InputText @bind-Value="_login.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => _login.Password)" />
                        </label>
                    </div>
                    <button class="btn btn-primary">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </button>
                    @if (!string.IsNullOrEmpty(_error))
                    {
                        <div class="alert alert-danger mt-3 mb-0">@_error</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        _loading = true;
        try
        {
            await AuthenticationService.Login(_login);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _loading = false;
            StateHasChanged();
        }
    }

    private LoginDto _login = new LoginDto();
    private bool _loading;
    private string _error;


}
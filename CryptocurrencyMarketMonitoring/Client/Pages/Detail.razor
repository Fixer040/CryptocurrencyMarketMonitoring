@page "/detail/{Currency}"

@using Syncfusion.Blazor.Charts;
@using CryptocurrencyMarketMonitoring.Shared
@using System.Linq;
@using System.Collections.Generic;
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Layouts



@inject HttpClient Http


<div class="px-4 text-center justify-content-center w-75 m-auto">
    <SfDashboardLayout Columns="6" CellSpacing="@(new double[]{10 ,10 })">
        <DashboardLayoutPanels>
            <DashboardLayoutPanel Id="Panel1" SizeX=6 SizeY=2 Column=1 Row=1>
                <HeaderTemplate><div class='header'> Trading view data by Binance</div></HeaderTemplate>
                <ContentTemplate>
                    <div class="w-100">
                        <SfStockChart>
                            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>
                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
                            <StockChartSeriesCollection>
                                <StockChartSeries DataSource="@ChartData" Type="ChartSeriesType.Candle"
                                                  XName="@nameof(ChartDataDto.Date)"
                                                  YName="@nameof(ChartDataDto.Close)"
                                                  High="@nameof(ChartDataDto.High)"
                                                  Low="@nameof(ChartDataDto.Low)"
                                                  Open="@nameof(ChartDataDto.Open)"
                                                  Close="@nameof(ChartDataDto.Close)"
                                                  Volume="@nameof(ChartDataDto.Volume)">
                                </StockChartSeries>
                            </StockChartSeriesCollection>
                        </SfStockChart>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>
        </DashboardLayoutPanels>
    </SfDashboardLayout>
</div>


@code {
    [Parameter]
    public string Currency { get; set; }
    public string VsCurrency { get; set; } = "USD";
    public CryptocurrencyMarketMonitoring.Shared.IntervalType IntervalType { get; set; } = CryptocurrencyMarketMonitoring.Shared.IntervalType.one_hour;

    public List<ChartDataDto> ChartData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var cryptocurrencyList = await Http.GetFromJsonAsync<ChartDataDto[]>($"ChartData/{Currency}/{VsCurrency}/{IntervalType}");

        ChartData = cryptocurrencyList.ToList();

        StateHasChanged();
        base.OnInitialized();
    }


    public async Task UpdateGrid(int intervalType)
    {
        var cryptocurrencyList = await Http.GetFromJsonAsync<ChartDataDto[]>($"ChartData/{Currency}/{VsCurrency}/{IntervalType}");

        ChartData = cryptocurrencyList.ToList();        // Here you can customize your code
        StateHasChanged();
    }

}
